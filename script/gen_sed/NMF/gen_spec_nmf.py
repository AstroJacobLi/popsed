import os
import sys
import time
import fire
import multiprocess as mp
import pickle
import numpy as np
from functools import partial

mp.freeze_support()
import os
os.chdir('/scratch/gpfs/jiaxuanl/Data/popsed/')

sys.path.append('/home/jiaxuanl/Research/popsed/')
from popsed import models, prior

wave_lo = 1000.
wave_hi = 60000.

def gen_params_nmf_sfh(N_samples, burst=True, random_seed=None):
    """
    Generate SPS parameters using NMF-based SFH (with starburst available),
    a fixed metallicity, and three-parameter dust attenuation.
    The redshift range is [0, 1.5], which should be fine for most of applications. 
    """
    ncomp = 4
    if burst:
        priors = prior.load_priors([
            # Log stellar mass, in M_sun
            prior.UniformPrior(0.0, 0.0, label='logmstar'),
            # flat dirichilet priors for SFH
            prior.FlatDirichletPrior(ncomp, label='beta'),
            # uniform priors on the mass fraction of burst
            prior.UniformPrior(0, 1.0, label='fburst'),
            # uniform priors on star-burst lookback time
            prior.UniformPrior(1e-2, 13.27, label='tburst'),
            # uniform priors on log-metallicity, absolute Z
            prior.UniformPrior(-2.6, 0.3, label='logzsol'),
            # uniform priors on dust1
            prior.UniformPrior(0., 3., label='dust1'),
            # uniform priors on dust2
            prior.UniformPrior(0., 3., label='dust2'),
            # uniform priors on dust_index
            prior.UniformPrior(-3., 1., label='dust_index'),
            # uniformly sample redshift
            prior.UniformPrior(0., 1.5, label='redshift')
        ])
    else:
        priors = prior.load_priors([
            # Log stellar mass, in M_sun
            prior.UniformPrior(0.0, 0.0, label='logmstar'),
            # flat dirichilet priors for SFH
            prior.FlatDirichletPrior(ncomp, label='beta'),
            # uniform priors on log-metallicity, absolute Z
            prior.UniformPrior(-2.6, 0.3, label='logzsol'),
            # uniform priors on dust1
            prior.UniformPrior(0., 3., label='dust1'),
            # uniform priors on dust2
            prior.UniformPrior(0., 3., label='dust2'),
            # uniform priors on dust_index
            prior.UniformPrior(-3., 1., label='dust_index'),
            # uniformly sample redshift
            prior.UniformPrior(0., 1.5, label='redshift')
        ])
    if random_seed is not None:
        np.random.seed(random_seed)
    _thetas = np.array([priors.transform(priors.sample())
                        for i in range(N_samples)])
    _thetas_unt = priors.untransform(_thetas)
    # untransform version of input parameter. The coefficients
    # for NMF basis are generated by transforming a set of
    # uniform RV. We use the untransformed values of RV to
    # train the PCA better.
    return _thetas, _thetas_unt


def _fsps_model_wrapper(theta, sps):
    """
    Wrapper for getting spectra from FSPS.
    """
    tage = sps._tage_z_interp(theta[-1])  # convert redshift to t_age
    _, _spec = sps._fsps(theta[:-1], tage)
    return np.log10(_spec[sps.wlim])


def gen_spec(ncpu=32, ibatch=1, N_samples=5000, burst=True, peraa=False,
             name='NMF', version='0.2',
             dat_dir='/scratch/gpfs/jiaxuanl/Data/popsed/train_sed_NMF/'):
    """
    Function for generating spectra using FSPS and NMF-based SFH.
    
    Parameters
    ----------
    ncpu : int, number of CPUs to use
    ibatch : int, batch number
    N_samples : int, number of SEDs to generate
    burst : bool, whether to include starburst component
    peraa : bool, whether to output in Lsun/AA. If False, output in Lsun/Hz. Default: False.
    name : str, name of the model
    version : str, version of the model
    dat_dir : str, directory to save the generated SEDs

    Notes
    -----
    Version 0.1: fburst is a uniform prior on [0, 0.8]. redshift is a uniform prior on [0, 1.0].
    Version 0.2: fburst is a uniform prior on [0, 1.0]. redshift is a uniform prior on [0, 1.5].
    """

    start = time.time()
    print('N_samples:', N_samples)
    print('ncpu:', ncpu)

    # Iinitialize FSPS
    sps = models.NMF(burst=burst, peraa=peraa)
    print(f'Initialize FSPS: burst={burst}, peraa={peraa} \n')
    sps._ssp_initiate()
    w_fsps = sps._ssp.wavelengths
    wlim = (w_fsps >= wave_lo) & (w_fsps <= wave_hi)
    sps.wlim = wlim
    wave = w_fsps[wlim]
    np.save(os.path.join(dat_dir, 'fsps.wavelength.npy'), wave)

    # File name for the output
    ftheta = os.path.join(
        dat_dir, 'fsps.%s.v%s.theta.seed%s.npy' % (name, version, ibatch))
    ftheta_unt = os.path.join(
        dat_dir, 'fsps.%s.v%s.theta_unt.seed%s.npy' % (name, version, ibatch))
    fspectrum = os.path.join(
        dat_dir, 'fsps.%s.v%s.log10spectrum.seed%s.npy' % (name, version, ibatch))

    # Generate parameters by sampling from the priors
    if ibatch == 'test':
        thetas, thetas_unt = gen_params_nmf_sfh(
            N_samples, burst=burst, random_seed=42)
    else:
        thetas, thetas_unt = gen_params_nmf_sfh(
            N_samples, burst=burst, random_seed=ibatch)

    tages = sps._tage_z_interp(thetas[:, -1:])  # convert redshift to t_age

    print('Total number of parameters:', thetas.shape[1])
    print('Total number of samples in parameter space:', len(thetas))

    print()
    print('---- Batch %s ----' % str(ibatch))
    # save parameters sampled from prior
    print('    Saving thetas to %s' % ftheta)
    np.save(ftheta, thetas)
    np.save(ftheta_unt, thetas_unt)

    if (ncpu == 1):  # run on serial
        logspectra = []
        for _theta, _tage in zip(thetas, tages):
            _, _spec = sps._fsps(_theta[:-1], _tage)
            logspectra.append(np.log10(_spec[wlim]))
    else:
        pewl = mp.Pool(ncpu)
        logspectra = pewl.map(partial(_fsps_model_wrapper, sps=sps), thetas)

    print('    Saving log10(spectra) to %s' % fspectrum)
    np.save(fspectrum, np.array(logspectra))
    print()

    # divide spectra into wavelength bins
    wave_bin00 = (wave >= 1000) & (wave < 2000)
    wave_bin0 = (wave >= 2000) & (wave < 3600)
    wave_bin1 = (wave >= 3600) & (wave < 5500)
    wave_bin2 = (wave >= 5500) & (wave < 7410)
    wave_bin3 = (wave >= 7410) & (wave < 60000)

    np.save(fspectrum.replace('.npy', '.w1000_2000.npy'),
            np.array(logspectra)[:, wave_bin00])
    np.save(fspectrum.replace('.npy', '.w2000_3600.npy'),
            np.array(logspectra)[:, wave_bin0])
    np.save(fspectrum.replace('.npy', '.w3600_5500.npy'),
            np.array(logspectra)[:, wave_bin1])
    np.save(fspectrum.replace('.npy', '.w5500_7410.npy'),
            np.array(logspectra)[:, wave_bin2])
    np.save(fspectrum.replace('.npy', '.w7410_60000.npy'),
            np.array(logspectra)[:, wave_bin3])

    end = time.time()
    print('Elapsed time = {0:.2f} s'.format(end - start))


if __name__ == '__main__':
    fire.Fire(gen_spec)

# Example:
# python gen_spec_nmf.py --ncpu=1 --ibatch=1 --N_samples=5 --burst=True
